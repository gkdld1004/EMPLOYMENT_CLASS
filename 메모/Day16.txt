* 캐스팅 (Casting)
변수나 리터럴 타입을 다른 타입으로 변환하는 것 = 형변환

- 업캐스팅 
서브클래스의 객체가 슈퍼 클래스 타입으로 변환되는 것
기본 클래스의 포인터로 파생 클래스의 객체를 가리키는 것
-> 업캐스팅한 레퍼런스로는 객체 내에 실존하는 모든 데이터를 접근할 수 없고 
   슈퍼 클래스의 멤버만 접근이 가능

- 다운캐스팅
업캐스팅 된 것을 다시 원래대로 되돌리는 것 (슈퍼클래스레퍼런스를 서브클래스레퍼런스에 대입하는 것)
명시적으로 타입변환을 지정해줘야 함

* instanceof : 객체의 타입을 구분하는 연산자
객체레퍼런스 instanceof 클래스타입
'레퍼런스'가 가리키는 객체가 해당 '클래스 타입'인지 여부에 따라 true/false의 결과처리

* 접근제한자 (public > protected > (package) > private)
- public : 어디서든 직접 접근 가능
- protected : 같은 패키지에 있거나 상속받는 클래스들에서 직접 접근 가능
- package : 같은 패키지에 있는 클래스들에서 직접 접근 가능
- private : 선언된 클래스 안에서만 직접 접근 가능

* final : 절대 변하지 않는 특정한 것을 지정하고 싶을 때 사용
=> 값이 바뀌는 것을 막고, 메서드 다형성을 막고, 클래스에서는 상속이 멈춤

* 추상클래스 (abstract class)
메소드를 정의하지 않고 메소드 이름만 정해두고, 실제 메소드의 정의는 나중에 상속받는 자식클래스에서 정의하도록 한 클래스
(정의하지 않은 메소드가 하나라도 있으면 추상클래스)

* 인터페이스(interface)
추상클래스보다 더 단순화된 형태
상수와 메소드 이름만으로 구성 
공통적으로 사용되는 형태를 껍데기로 만들어 놓고 자식클래스들이 입맛에 맞게 구현하도록하고,
자식클래스를 사용할 때 겉보기에는 똑같은 모습으로 보이도록 할 목적으로 사용