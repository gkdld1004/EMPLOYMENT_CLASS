Input	: 입력 (표준입력, 파일입력)
Output	: 출력 (표준출력, 파일출력)
Stream	: 통로, 흐름, 데이터가 이동할 수 있도록 준비하는 객체
Buffer	: 입출력 간에 일정 단위만큼 받아두었다가 한번에 몰아서 전달하기 위한 임시 메모리

	String str = "Hello, world !!";

	1) 한번에 한 글자씩 담는다. (담을 때마다 함수 호출)
	2) 그릇을 준비하고 그릇이 꽉 차면 그릇 통째로 담는다. (담을 때마다 함수 호출)

Scanner	: 표준 입력 혹은 파일 입력을 통해서 데이터를 읽어들일 수 있는 객체
Array	: 같은 자료형의 데이터를 연속된 공간에 배치하여 관리하는 자료구저 (배열)
File	: 컴퓨터의 데이터를 디스크에 저장할 수 있는 형태로 만든 객체, 디렉토리도 포함
Reader	: 데이터 중에서도 특히 문자열을 읽기 위한 형식
Writer	: 데이터 중에서도 특히 문자열을 쓰기 위한 형식

==========================================================================

[ 자료형	] ──┬─ 	[  클래스	]  ──┬───[ 멤버 필드	] ─── [ 상속 (자료형) 	 ] 
[ 변수	]   │	[  객체	]    │	 [ 멤버 메서드 	] ─── [ 오버라이딩	   	 ]
	    │                │	 [ 생성자		] ─── [overload, override]
	    ├─	[  함수	]  ──┘
		[매개변수	]
		[ 반환형	]
		[지역변수	]
[ 제어문	]
[ 연산자	]
[ 배열	] ───	[ 컬렉션	] + [ 제네릭 (자료형) ]

==========================================================================

[ 캡슐화	] - [ 클래스와 객체	]
[ 상속	] - [ 서브클래스가 슈퍼클래스의 모든 내용을 물려받는다	]
[ 추상화	] - [ 자료형 자체로는 객체를 생성할 수 없다. 모든 자료형이 객체를 생성하지는 않는다 ]
[ 다형성	] - [ 서브클래스는 슈퍼클래스로 취급될 수도 있다 ]

==========================================================================

추상클래스, 인터페이스, 추상메서드, 익명클래스, 람다식 객체 생성, 함수형 인터페이스
상속에 의해서, 내가 직접 만들지 않더라도, 이미 만들어진 클래스를 가져다 쓸 수 있다
기존 클래스의 특성을 그대로 물려받은 나만의 클래스를 작성하여 활용할 수 있다
만들어진 여러 클래스 : API
	java.util.Scanner, Date, 각종 컬렉션 클래스
	java.text.SimpleDateFormat
	java.io.각종 입출력 클래스

내가 구현하고 싶은 내용을 머릿속에서 객체 지향의 방식으로 그려내고 그 내용을 코드로 옮겨적은 후 테스트한다